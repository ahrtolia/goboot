// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"goboot/pkg"
	"goboot/pkg/config"
	"goboot/pkg/gin"
	"goboot/pkg/gorm"
	"goboot/pkg/logger"
)

// Injectors from wire.go:

func CreateApp(configFile2 string) (*app.App, error) {
	options := config.NewOptions()
	configManager := config.InitConfigManager(options)
	manager, err := logger.NewManager(configManager)
	if err != nil {
		return nil, err
	}
	option, err := gin.NewOption(configManager)
	if err != nil {
		return nil, err
	}
	server, err := gin.NewServer(manager, configManager, option)
	if err != nil {
		return nil, err
	}
	appApp := &app.App{
		Config: configManager,
		Logger: manager,
		Http:   server,
	}
	return appApp, nil
}

// wire.go:

var (
	configSet = wire.NewSet(config.ProviderSet, config.NacosProvider)

	loggerSet = wire.NewSet(logger.ProviderSet)

	httpSet = wire.NewSet(gin.ProviderSet)

	dbSet = wire.NewSet(gorm.ProviderSet)

	appSet = wire.NewSet(wire.Struct(new(app.App), "*"))

	globalSet = wire.NewSet(
		configSet,
		loggerSet,
		httpSet,
		dbSet,
		appSet,
	)
)
